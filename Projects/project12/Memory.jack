// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/
// It is an extension to the specifications given in  
// https://www.nand2tetris.org (Shimon Schocken and Noam Nisan, 2017)
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0 
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array heap, ram; 
    static int freeList;


    /** Initializes the class. */
    function void init() {
        // Pseudocode:
        // 1. freeList = heapBase
        // 2. freeList.length = heapLength
        // 3. freeList.next = null
        let heap = 2048;
        let ram = 0;
        let freeList = 2048;
        let heap[0]=0;
        let heap[1]=14335;
        return ;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. Assume size > 0. */
    function int alloc(int size) {
        // Pseudocode:
        // 1. Search freeList using best-fit or first-fit heuristics to obtain
        //    a segment with segment.length > size.
        //    If no such segment is found, return -1.
        // 2. block = needed part of the found segment (or all of it, if the 
        //            segment remainder is too small).
        // 3. block[-1] = size + 1 // Remember block size, for de-allocation
        // 4. Update freeList to reflect the allocation
        // 5. Return block
        // The figure MemoryTest/MemoryFreeListExample.png illustrates how
        // the freeList should look like.
        var int address;
        var Array currBlock;
        var boolean notLast;
        if(~(size>0)){
            do Sys.error(5);
        }
        if(size>14355){
            do Sys.error(6);
        }
        let notLast = true; 
        let address = 0;
        let currBlock = freeList;
        while ((address = 0) & notLast){
            if(currBlock[0]=0){
                let notLast = false;
            }
            if ((currBlock[1] > size + 2) | (currBlock[1] = size + 2)){
            let address = currBlock + currBlock[1] - size;
            do Memory.poke(address-1, size);
            let currBlock[1] = currBlock[1] - (size + 2);
        } 
            else{
                let currBlock = currBlock[0];
            }
        }
        return address;
    }

        /** De-allocates the given object (cast as an array) by making
        *  it available for future allocations. */
    function void deAlloc(Array o) {
        // Pseudocode:
        // 1. segment = o - 1
        // 2. Insert segment into the freeLis
        var int advance, addr;
        let addr = freeList;
        let advance = Memory.peek(addr);
        while (~(advance = 0)) {
            let addr = advance;
            let advance = Memory.peek(addr);
        }
        do Memory.poke(advance,o);
        return;
    }      

    /** Returns the maximal element contained in the given Array/object. 
     * Assume inputs are initialized and contain at least one element. */
	function int max(Array o) {
        // Hint: the algorithm you need to implement in Memory.alloc saves the
        // size of the allocated block in the memory cell right before the 
        // start of the block, and this can be used to implement Memory.max.
        var int length, max, i;
        let length = Memory.peek(o-1);
        let max = Memory.peek(o);
        let i = 1;
        while (i<length){
            if (o[i]>max){
                let max = o[i];
            }
            let i = i+1;
        }
        return max;
    }
}
