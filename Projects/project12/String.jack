// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length, maximal;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength<0){
            do Sys.error(14);
        }
        if (maxLength > 0){
            let str = Array.new(maxLength);
        }
        let length = 0;
        let maximal = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if(j> maximal){
            do Sys.error(15);
        }
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if(j> maximal){
            do Sys.error(16);
        }
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length = maximal){
            do Sys.error(17);
        }
        let str[length] = c;
        let length = length +1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length = 0){
            do Sys.error(18);
        }
        let str[length-1] ="";
        let length = length -1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, val, endWith, tenpow;
        var boolean isneg;
        let isneg = false;
        let endWith = 0;
        let val = 0;
        let i = 0;
        let tenpow = 1;
        if (charAt(0) = 45){
            let isneg = true;
            let i = i+1;
            let endWith = 1;
        }
        while(((charAt(i)>47) |(charAt(i)<58))& i < maximal){ 
            let i = i+1;
        }
        if (~((charAt(i)>47) & (charAt(i)<58))){
            let i = i-1;
        }
        while((i>endWith)|(i=endWith)){
            let val = val + ((charAt(i)-48)*tenpow);
            let i = i-1;
            let tenpow = tenpow*10;
        }
        if(isneg){
            let val = -val;
        }
        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let length = 0;// added
        if (val<0){
            do appendChar(45);
            let val = -val;
            let length = 1;// added
        }
        do inttostring(val);
        return;

    }

    method void inttostring(int val){
        var int lastdigit,c;
        let lastdigit = val-((val/10)*10);
        let c = lastdigit + 48;
        if(val<10){
            do appendChar(c);
            return;
        }
        else{
            do inttostring(val/10);
            do appendChar(c);
            return;
        }
    } 

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
