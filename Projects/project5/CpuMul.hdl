// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/

// This chip is an extension of the regular CPU that uses the extended ALU.
// If instruction[15]==0 or (instruction[14] and instruction[13] equals 1)
// the CpuMul behave exactly as the same as the regular CPU.
// If the instruction is a c-instruction and instruction[14] == 0, the chip will 
// behave as follows:
//  Instruction  | 12 | 11 | 10 |
// ______________________________
// dest=D<<;jump | 0  | 1  | 1  |
// dest=A<<;jump | 0  | 1  | 0  |
// dest=M<<;jump | 1  | 1  | 0  |
// dest=D>>;jump | 0  | 0  | 1  |
// dest=A>>;jump | 0  | 0  | 0  |
// dest=M>>;jump | 1  | 0  | 0  |

CHIP CpuMul {
    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).
    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction
    
    PARTS:
    Mux16(a=instruction ,b=outalu ,sel=instruction[15] ,out=totheA);
	Mux16(a=afterA ,b=inM ,sel=instruction[12] ,out=toprealu );
	Mux16 (a = true, b = toprealu, sel = instruction[15], out = toalu);
	Not (in = instruction[15], out = toAfromins);
	Or (a = toAfromins, b = instruction[5], out = loadAreg);
	ARegister(in=totheA ,load=loadAreg ,out=afterA, out[0..14] = addressM);
	And (a = instruction[4], b = instruction[15], out = loadDreg);
	DRegister(in=outalu ,load=loadDreg ,out=afD );
	And(a=instruction[14] ,b=instruction[15] ,out=extAlu);
	And(a=instruction[11] ,b=instruction[15] ,out=tozx );
	And(a=instruction[10] ,b=instruction[15] ,out=tonx );
	And(a=instruction[9] ,b=instruction[15] ,out=tozy );
	And(a=instruction[8] ,b=instruction[15] ,out=tony );
	And(a=instruction[7] ,b=instruction[15] ,out=tof );
	And(a=instruction[6] ,b=instruction[15] ,out=tono );
	ExtendAlu(x=afD ,y=toalu, instruction[8]=extAlu ,instruction[7]=true ,instruction[6]=false ,instruction[5]=tozx ,instruction[4]=tonx ,instruction[3]=tozy ,instruction[2]=tony ,instruction[1]=tof ,instruction[0]=tono ,out=outalu, out=outM ,zr=iszero ,ng=isneg );
	PC(in=afterA ,load=tojump ,inc=toinc ,reset=reset ,out[0..14]=pc );
	Or(a=iszero ,b=isneg ,out=outisnegorzero ) ;
	Not (in = outisnegorzero, out = isPos);
	And (a=instruction[15] , b=instruction[0], out=insPos );
	And (a=instruction[15] , b=instruction[1], out=insZero );
	And (a=instruction[15] , b=instruction[2], out=insNeg );
	And(a=isPos ,b=insPos ,out=afXpos );
	And(a=iszero ,b=insZero ,out=afXzero );
	And(a=isneg ,b=insNeg ,out=afXneg );
	Or(a=afXpos ,b=afXzero ,out=afoneOr );
	Or(a=afXneg ,b=afoneOr ,out=tojump );
	Or(a = tojump, b = reset, out = beftoinc);
	Not (in = beftoinc, out = toinc);
	And (a = instruction[15], b = instruction[3], out = writeM);
}
