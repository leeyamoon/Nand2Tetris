// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/

// The inputs of the extended ALU are instruction[9], x[16], y[16].
// The output is defined as follows:
// If instruction[7..8] == 1, 1, the output is the same as the regular ALU,
// where instruction[5]=zx, instruction[4]=nx, ..., instruction[0]=no.
// If instruction[8] == 0, the output will be a shift of the input:
// - If instruction[4] == 0, the input "y" will be shifted, otherwise "x", 
// - If instruction[5] == 0, the shift will be a right-shift, otherwise left.

CHIP ExtendAlu {
     IN x[16], y[16], instruction[9];
     OUT out[16], zr, ng;
     
     PARTS:
     And (a = instruction[7], b=instruction[8], out=ifreg); //if 1 so ALU if 0 so shift
	 ALU (x = x, y=y, zx=instruction[5], nx=instruction[4], zy=instruction[3], ny=instruction[2], f=instruction[1], no=instruction[0], out=aluout, zr=aluzr, ng=alung);
	 Mux16(a=y, b=x, sel=instruction[4], out=outxory);
	 ShiftLeft(in=outxory, out=leftout);
	 ShiftRight(in=outxory, out=rightout);
	 Mux16(a=rightout, b=leftout, sel=instruction[5], out=aftshift, out[0..7]=onehalfout, out[8..15]=twohalfout, out[15]=shiftisneg);
	 Mux16(a=aftshift, b=aluout, sel=ifreg, out=out);
	 
	 //if the output is ng or zr
	 Or8Way(in=onehalfout, out=oneout);
	 Or8Way(in=twohalfout, out=twoout);
	 Or(a=oneout, b=twoout, out=shiftNotzr);
	 Not(in=shiftNotzr, out=shiftzr);
	 Mux(a=shiftisneg, b=alung, sel=ifreg, out=ng);
	 Mux(a=shiftzr, b=aluzr, sel=ifreg, out=zr);
	 
	 
}
